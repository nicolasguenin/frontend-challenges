@use "sass:math";
@use "../variables/typos";

@function getConstrastedColor($color) {
  @return (red($color) * 299) + (green($color) * 587) + (blue($color) * 114);
}

@function getVariateColor($color, $light-color-returned: #fff, $black-color-returned: #000) {
  $color-brightness: round(math.div(getConstrastedColor($color), 1000));
  // divide by 1000 to respect a11y standards
  $light-color: round(math.div(getConstrastedColor(#ffffff), 800));

  @if abs($color-brightness) < math.div($light-color, 2) {
    @return $light-color-returned;
  } @else {
    @return $black-color-returned;
  }
}

//
//  Function to create an optimized svg url
//
@function svg-url($svg) {
  //
  //  Add missing namespace
  //
  @if not str-index($svg, xmlns) {
    $svg: str-replace($svg, "<svg", '<svg xmlns="http://www.w3.org/2000/svg"');
  }
  //
  //  Chunk up string in order to avoid
  //  "stack level too deep" error
  //
  $encoded: "";
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg) / $slice);
  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);
    //
    //   Encode
    //
    $chunk: str-replace($chunk, '"', "'");
    $chunk: str-replace($chunk, "%", "%25");
    $chunk: str-replace($chunk, "&", "%26");
    $chunk: str-replace($chunk, "#", "%23");
    $chunk: str-replace($chunk, "{", "%7B");
    $chunk: str-replace($chunk, "}", "%7D");
    $chunk: str-replace($chunk, "<", "%3C");
    $chunk: str-replace($chunk, ">", "%3E");

    //
    //    The maybe list
    //
    //    Keep size and compile time down
    //    ... only add on documented fail
    //
    //  $chunk: str-replace($chunk, '|', '%7C');
    //  $chunk: str-replace($chunk, '[', '%5B');
    //  $chunk: str-replace($chunk, ']', '%5D');
    //  $chunk: str-replace($chunk, '^', '%5E');
    //  $chunk: str-replace($chunk, '`', '%60');
    //  $chunk: str-replace($chunk, ';', '%3B');
    //  $chunk: str-replace($chunk, '?', '%3F');
    //  $chunk: str-replace($chunk, ':', '%3A');
    //  $chunk: str-replace($chunk, '@', '%40');
    //  $chunk: str-replace($chunk, '=', '%3D');

    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }
  @return url("data:image/svg+xml,#{$encoded}");
}

//  Background svg mixin
@mixin background-svg($svg) {
  background-image: svg-url($svg);
}

//  Helper function to replace characters in a string
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);
  @return if(
      $index,
      str-slice($string, 1, $index - 1) + $replace +
            str-replace(str-slice($string, $index + str-length($search)), $search, $replace),
      $string
  );
}

/**
 * Calculate an em value from a px value
 * @param {Number} $px - A value to be converted in em
 * @param {Number} $base - The base pixel value of the app
 * @return {Number} - The $px value converted in em
 */
@function em($px, $base: typos.$default-font-size) {
  @return (math.div($px, $base)) * 1em;
}

/**
 * Calculate an rem value from a px value
 * @param {Number} $px - A value to be converted in em
 * @param {Number} $user-default-font-size - The default font-size of the browser. Should be equivalent to 16px
 * @return {Number} - The $px value converted in rem
 */
@function rem(
  $px,
  $user-default-font-size: typos.$root-default-font-size
) {
  @return (math.div($px, $user-default-font-size)) * 1rem;
}
